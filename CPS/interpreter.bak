;;; Interpreter for lambda calculus expressions
;;; This code is a compilation of code presented in EOPL (2nd ed)
#lang racket
(require "../chez-init.rkt")
(require racket/trace)
(provide eval-one-exp)

(define eval-one-exp
  (lambda (exp)
    (top-level-eval (parse-expression exp))))

(define top-level-eval
  (lambda (form)
    (eval-expression form (halt-cont) global-env))) ;(extend-env '(a b +) '(3 4) (global-env)))))


(define eval-expression
  (lambda (exp cont env)
    (cases expression exp
      [lit-exp (val) (apply-cont cont val)]
      [var-exp (id) (apply-cont cont (apply-env env id))]
      [if-exp (test-exp iftrue-exp iffalse-exp)
              (eval-expression test-exp (if-cont iftrue-exp iffalse-exp cont env) env)]
      [app-exp (proc-and-args)
               (eval-expressions-cps proc-and-args (proc-cont cont) env)]
      [else (error 'eval-expression "not implemented ~s" exp)])))
;(trace eval-expression)


(define eval-expressions-cps
  (lambda (proc-and-args cont env)
    (if (null? proc-and-args)
        (apply-cont cont '())
        (eval-expression (car proc-and-args)
                         (eval-exps-cont
                          cont
                          (cdr proc-and-args)
                          ;rator
                          ;(cdr rands)
                          env)
                         env))))

;(trace eval-expressions-cps)

;;; Continuations

(define anything?
  (lambda (_) #t))

(define-datatype continuation continuation?
  [halt-cont]
  [if-cont
   (true-exp expression?)
   (false-exp expression?)
   (cont continuation?)
   (env list?)]
  [eval-exps-cont
   (cont continuation?)
   ;(rator expression?)
   (proc-and-args (listof expression?))
   (env list?)]
  [cons-cont
   (k continuation?)
   (val anything?)]
  [proc-cont
   ;(rands list?)
   (cont continuation?)]
  [map-cdr-k
   (proc proc-val?)
   (rest list?)
   (k continuation?)]
  [map-car-k
   (head anything?)
   (k continuation?)])


(define apply-cont
  (lambda (cont val)
    (cases continuation cont
      [halt-cont () val]
      [if-cont (if-true-exp if-false-exp next-cont env)
               (if val
                   (eval-expression if-true-exp next-cont env)
                   (eval-expression if-false-exp next-cont env))]
      [eval-exps-cont (k exps env)
                      (eval-expressions-cps exps (cons-cont k val) env)]
      [cons-cont (k v)
                 (apply-cont k (cons v val))]
      [proc-cont (cont)
                 (apply-proc-cps (car val) (cdr val) cont)]
      [map-cdr-k (proc rest k)
                 (map-cps
                  proc
                  rest
                  (map-car-k val k))]
      [map-car-k (head k)
                 (apply-cont k (cons head val))])))

;(trace apply-cont)

(define apply-proc-cps
  (lambda (proc args cont)
    ; Only works for primitives
    (apply-prim-proc proc args cont)))
;(trace apply-proc-cps)


(define 1st car)
(define 2nd cadr)
(define 3rd caddr)
(define 4th cadddr)


(define apply-prim-proc
  (lambda (proc arguments cont)
    (cases proc-val proc
      [prim-proc (id)
                 (case id
                   [(list) (apply-cont cont arguments)]
                   [(car) (apply-cont cont (caar arguments))]
                   [(add1) (apply-cont cont (+ (car arguments) 1))]
                   [(-) (apply-cont cont (apply - arguments))]
                   [(+) (apply-cont cont (apply + arguments))]
                   [(*) (apply-cont cont (apply * arguments))]
                   [(/) (apply-cont cont (apply / arguments))]
                   [(sub1) (apply-cont cont (- (1st arguments) 1))]
                   [(zero?) (apply-cont cont (zero? (1st arguments)))]
                   [(not) (apply-cont cont (not (1st arguments)))]
                   [(=) (apply-cont cont (apply = arguments))]
                   [(<) (apply-cont cont (apply < arguments))]
                   [(>) (apply-cont cont (apply > arguments))]
                   [(<=) (apply-cont cont (apply <= arguments))]
                   [(>=) (apply-cont cont (apply >= arguments))]
                   [(cons) (apply-cont cont (cons (1st arguments) (2nd arguments)))]
                   [(cdr) (apply-cont cont (cdr (1st arguments)))]
                   [(null?) (apply-cont cont (null? (1st arguments)))]
                   [(assq) (apply-cont cont (assq (1st arguments) (2nd arguments)))]
                   [(eq?) (apply-cont cont (eq? (1st arguments) (2nd arguments)))]
                   [(equal?) (apply-cont cont (equal? (1st arguments) (2nd arguments)))]
                   [(atom?) (apply-cont cont (lambda (x) (and (not (null? x)) (not (pair? x)))) (1st arguments))]
                   [(length) (apply-cont cont (length (1st arguments)))]
                   [(list->vector) (apply-cont cont (list->vector (1st arguments)))]
                   [(list?) (apply-cont cont (list? (1st arguments)))]
                   [(pair?) (apply-cont cont (pair? (1st arguments)))]
                   ;[(procedure?) (closure? (1st arguments)))]
                   [(vector->list) (apply-cont cont (vector->list (1st arguments)))]
                   [(vector) (apply-cont cont (apply vector arguments))]
                   [(make-vector) (apply-cont cont (make-vector (1st arguments) (2nd arguments)))]      
                   [(vector-ref) (apply-cont cont (vector-ref (1st arguments) (2nd arguments)))]
                   [(vector?) (apply-cont cont (vector? (1st arguments)))]
                   [(number?) (apply-cont cont (number? (1st arguments)))]
                   [(symbol?) (apply-cont cont (symbol? (1st arguments)))]      
                   [(vector-set!) (apply-cont cont (vector-set! (1st arguments) (2nd arguments) (3rd arguments)))]
                   [(caar) (apply-cont cont (caar (1st arguments)))]
                   [(cadr) (apply-cont cont (cadr (1st arguments)))]
                   [(cdar) (apply-cont cont (cdar (1st arguments)))]
                   [(cddr) (apply-cont cont (cddr (1st arguments)))]
                   [(caaar) (apply-cont cont (caaar (1st arguments)))]
                   [(caadr) (apply-cont cont (caadr (1st arguments)))]
                   [(cadar) (apply-cont cont (cadar (1st arguments)))]
                   [(caddr) (apply-cont cont (caddr (1st arguments)))]
                   [(cdaar) (apply-cont cont (cdaar (1st arguments)))]
                   [(cdadr) (apply-cont cont (cdadr (1st arguments)))]
                   [(cddar) (apply-cont cont (cddar (1st arguments)))]
                   [(cdddr) (apply-cont cont (cdddr (1st arguments)))]
                   ;[(map) (apply-cont cont (map (1st arguments) (2nd arguments)))]
                   ;[(apply) (apply-cont cont (apply (1st arguments) (2nd arguments)))]
                   [(assv) (apply-cont cont (assv (1st arguments) (2nd arguments)))]
                   [(append) (apply-cont cont (apply append arguments))]
                   [else (error 'apply-prim-proc "Primitive procedure does not exist ~s" id)])])))

(define map-cps
	(lambda (proc ls k)
		(if (null? ls)
			(apply-cont k '())
			(proc (car ls) (map-cdr-k proc (cdr ls) k)))))

;(trace apply-prim-proc)
;;; parser

(define-datatype expression expression?
  [lit-exp
   (value anything?)]
  [var-exp
   (id symbol?)]
  [if-exp
   (test-exp expression?)
   (true-exp expression?)
   (false-exp expression?)]
  [app-exp
   (proc-and-args (listof expression?))])

(define parse-expression
  (lambda (datum)
    (cond [(symbol? datum) (var-exp datum)]
          [(number? datum) (lit-exp datum)]
          [(boolean? datum) (lit-exp datum)]
          [(string? datum) (lit-exp datum)]
          [(pair? datum)
           (cond [(eq? (car datum) 'quote) (lit-exp (cadr datum))]
                 [(eqv? (car datum) 'if)
                  (if-exp (parse-expression (cadr datum))
                          (parse-expression (caddr datum))
                          (parse-expression (cadddr datum)))]
                 [(eqv? (car datum) 'quote)
                  (lit-exp (cadr datum))]
                 [else
                  (app-exp
                   (map
                    (lambda (e) (parse-expression e))
                    datum))])]
          [else (error 'parse-expression
                       "Invalid concrete syntax ~s" datum)])))



;;; Rib cage implementation using:
;;; A list of symbols and
;;; A vector of values

(define empty-env
  (lambda ()
    '()))

(define extend-env
  (lambda (syms vals env)
    (cons (cons syms (list->vector vals)) env)))

(define apply-env
  (lambda (env sym)
    (if (null? env)
        (error 'apply-env "No binding for ~s" sym)
        (let ([syms (car (car env))]
              [vals (cdr (car env))]
              [env (cdr env)])
          (let ([pos (find-position sym syms)])
            (if (number? pos)
                (vector-ref vals pos)
                (apply-env (cdr env) sym)))))))

(define find-position
  (lambda (sym ls)
    (cond [(null? ls) #f]
          [(eq? sym (car ls)) 0]
          [else (let ([index (find-position sym (cdr ls))])
                  (if (number? index)
                      (+ index 1)
                      #f))])))

(define-datatype proc-val proc-val?
  [prim-proc
   (name symbol?)])


(define *prim-proc-names* '(list car add1 - + * / sub1 zero? not = < > >= <= cons
                                 cdr null? assq eq? equal? atom? length list->vector
                                 list? pair? procedure? vector->list vector make-vector
                                 vector-ref vector? number? symbol? vector-set! display
                                 newline caar cadr cdar cddr caaar caadr cadar caddr cdaar
                                 cdadr cddar cdddr map apply assv append))



(define global-env
  (extend-env *prim-proc-names* (map prim-proc *prim-proc-names*) (empty-env)))
;(lambda ()
;(empty-env)))
	 

